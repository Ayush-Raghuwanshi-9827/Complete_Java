
Design Patterns

Design Patterns are well-established solutions to common software design problems. They provide a standard way to solve recurring design issues, making code more flexible, reusable, and easier to maintain. Design patterns are like templates that can be applied to different software development situations.

Types of Design Patterns
Design patterns are primarily classified into three categories:

< Creational Patterns >

These patterns deal with object creation mechanisms, aiming to create objects in a manner suitable to the situation. They help make a system independent of how its objects are created.

1 -> Singleton: Ensures only one instance of a class exists and provides a global point of access to it.
2 -> Factory Method: Creates objects without specifying the exact class to be created.
3 -> Abstract Factory: Provides an interface to create families of related objects without specifying their concrete classes.
4 -> Builder: Separates object construction from its representation, allowing the same construction process to create different representations.
5 -> Prototype: Creates new objects by copying an existing object, known as the prototype.


< Structural Patterns >

These patterns deal with object composition and typically help ensure that when one part of a system changes, the entire structure doesn’t need to change.

1 -> Adapter: Allows incompatible interfaces to work together.
2 -> Bridge: Separates an object’s abstraction from its implementation so the two can vary independently.
3 -> Composite: Composes objects into tree-like structures to represent part-whole hierarchies.
4 -> Decorator: Adds behavior or responsibilities to objects at runtime.
5 -> Facade: Provides a simplified interface to a complex system.
6 -> Flyweight: Reduces memory usage by sharing common parts of object states.
7 -> Proxy: Provides a placeholder or surrogate for another object to control access to it.

< Behavioral Patterns> 

These patterns focus on communication between objects, ensuring that the interactions are flexible and can evolve.

1 -> Observer: Defines a dependency between objects so that when one object changes, others are notified and updated automatically.
2 -> Strategy: Defines a family of algorithms, encapsulates each one, and makes them interchangeable.
3 -> Command: Encapsulates a request as an object, allowing parameterization of clients with different requests.
4 -> Chain of Responsibility: Passes requests along a chain of handlers.
5 -> State: Allows an object to alter its behavior when its internal state changes.
6 -> Template Method: Defines the skeleton of an algorithm in a method, deferring some steps to subclasses.
7 -> Mediator: Reduces the complexity of communication between multiple objects or classes.
8 -> Memento: Captures and restores an object’s internal state.
9 -> Visitor: Allows adding further operations to objects without modifying their structure.
10 -> Iterator: Provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.

< Benefits of Design Patterns >

Reusable: Solve common problems which can be reused across different projects.
Scalable: Make code more scalable and adaptable to changes.
Readable: Improves code readability and helps new developers understand the design.

These patterns act as best practices, guiding developers to create clean and efficient code structures.